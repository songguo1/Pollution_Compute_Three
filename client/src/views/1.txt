File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\index.vue
<template>
<div>初始化页面</div>
</template>
<script>
export default{
name:'1',
components:{}
}
</script>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\Main.vue
<template>
<div class="main">
<HeadNav></HeadNav>
<div class="rightContainer" >
<keep-alive exclude="three,Analysis">
<router-view></router-view>
</keep-alive>
</div>
</div>
</template>
<script>
import HeadNav from "../components/HeadNav";
export default {
name: "Main",
components: {
HeadNav,
},
};
</script>
<style>
.main {
display: flex;
flex-direction: column;
height: 100vh; /* 使用视口高度 */
}
.rightContainer {
flex-grow: 1; /* 占据剩余空间 */
overflow: auto; /* 添加滚动条，如果内容超出容器高度 */
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\404\404.vue
<template>
<div class="notfound">
<img src="https://cdn.vuetifyjs.com/images/cards/sunshine.png" alt="">
</div>
</template>
<style scoped>
.notfound{
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\home\Home.vue
<template>
<div id="mapview">
<!-- 将sekectedItem传递给LeftMenu组件 -->
<LeftMenu :selectedItem="selectedItem"></LeftMenu>
<!-- <button @click="startDrawingPolygon">Start Drawing Polygon</button> -->
<div v-show="bufferVisible" class="input-box">
<div class="input-item">缓冲区半径（千米）：</div>
<el-input
class="input-num"
type="number"
v-model="input"
placeholder=""
></el-input>
<el-button class="clear-btn" type="primary" @click="clearBuffer"
>清空缓冲区</el-button
>
<el-button class="clear-btn" type="primary" @click="cancelBuffering"
>取消绘制</el-button
>
</div>
<div v-show="chartVisible">
<div style="width: 600px; height: 400px" id="chart"></div>
<div
style="
z-index: 999;
position: absolute;
bottom: 380px;
right: 10px;
cursor: pointer;
"
@click="chartVisible = false"
>
<i class="el-icon-close"></i>
</div>
</div>
<!-- 从子组件接受数据 -->
<div>
<MapButton
@changeBasemap="changeBasemap"
@clickItem="handleClickItem"
@addBuffer="addBuffer"
@showRecord="ShowRecord"
></MapButton>
</div>
<div id="scalebar"></div>
<el-dialog
title="历史记录"
:visible.sync="showRecord"
customClass="customWidth"
>
<Record :selectedItem="selectedItem"></Record>
</el-dialog>
</div>
</template>
<script>
import "@arcgis/core/assets/esri/themes/light/main.css";
import Map from "@arcgis/core/Map";
import MapView from "@arcgis/core/views/MapView";
import TileLayer from "@arcgis/core/layers/TileLayer";
import Basemap from "@arcgis/core/Basemap";
import FeatureLayer from "@arcgis/core/layers/FeatureLayer";
import GeoJSONLayer from "@arcgis/core/layers/GeoJSONLayer";
import * as geometryEngine from "@arcgis/core/geometry/geometryEngine.js";
import WebTileLayer from "@arcgis/core/layers/WebTileLayer";
import WFSLayer from "@arcgis/core/layers/WFSLayer";
import Point from "@arcgis/core/geometry/Point";
import GraphicsLayer from "@arcgis/core/layers/GraphicsLayer";
import SimpleMarkerSymbol from "@arcgis/core/symbols/SimpleMarkerSymbol";
import SimpleRenderer from "@arcgis/core/renderers/SimpleRenderer";
import SimpleFillSymbol from "@arcgis/core/symbols/SimpleFillSymbol";
import Draw from "@arcgis/core/views/draw/Draw.js";
import Graphic from "@arcgis/core/Graphic";
import LeftMenu from "../../components/MapComponent/LeftMenu";
import MapButton from "../../components/MapComponent/MapButton";
import Record from "../../components/MapComponent/Record";
import { init } from "echarts";
export default {
name: "MapView",
components: { MapButton, LeftMenu, Record },
data() {
return {
showRecord: false,
chartVisible: false,
map: null,
mapTileLayer: null,
view: null,
tableData: [],
//选中的项目
selectedItem: {},
// 绘制的多边形
draw: null,
graphicsLayer: null,
input: 10,
clickHandler: null, // 用于保存点击事件侦听器
bufferVisible: false,
pointGraphicLayer: null,
FeatureLayer: null,
};
},
mounted() {
this.initMap();
},
methods: {
ShowRecord() {
if (!this.selectedItem.code) {
this.$message.error("请先选择项目");
return;
}
this.showRecord = true;
},
initMap() {
const { name } = this.$store.getters.user;
const userdata = {
name,
};
this.$axios
.post("/proj/all", userdata)
.then((res) => {
this.tableData = res.data;
this.createMapView();
})
.catch((err) => {
console.log(err);
});
},
cancelBuffering() {
this.bufferVisible = false;
//绘制缓冲区事件取消
// 取消点击事件侦听器
if (this.clickHandler) {
this.clickHandler.remove();
this.clickHandler = null;
}
this.graphicsLayer.removeAll();
},
clearBuffer() {
this.graphicsLayer.removeAll();
},
//添加缓冲区
addBuffer() {
this.bufferVisible = true;
this.graphicsLayer = new GraphicsLayer();
this.map.add(this.graphicsLayer);
//拖动点图标到地图上，选中图标
this.clickHandler = this.view.on("click", (event) => {
var point = new Point({
latitude: event.mapPoint.latitude,
longitude: event.mapPoint.longitude,
spatialReference: { wkid: 4326 },
});
var markerSymbol = new SimpleMarkerSymbol({
color: [226, 119, 40],
outline: {
color: [255, 255, 255],
width: 2,
},
});
var pointGraphic = new Graphic({
geometry: point,
symbol: markerSymbol,
});
this.graphicsLayer.add(pointGraphic);
// 创建一个缓冲区
try {
// 其他的代码...
var bufferarea = geometryEngine.geodesicBuffer(
point,
`${this.input}`,
"kilometers"
);
// 其他的代码...
} catch (error) {
console.error("An error occurred while buffering:", error);
// 进行适当的错误处理
}
// 将缓冲区添加到图形层
var bufferGraphic = new Graphic({
geometry: bufferarea,
symbol: {
type: "simple-fill",
color: [0, 255, 255, 0.1],
outline: {
color: [255, 255, 255],
width: 1,
},
},
});
this.graphicsLayer.add(bufferGraphic);
// 创建一个裁剪区域
// const clippedGeometry = geometryEngine.clip(
//   this.tileLayer.fullExtent,
//   bufferarea
// );
// // 将裁剪区域转换为图形并添加到图形层
// if (clippedGeometry) {
//   const clippedGraphic = new Graphic({
//     geometry: clippedGeometry,
//     symbol: {
//       type: "simple-fill",
//       color: [255, 0, 0, 0.5],
//       outline: {
//         color: [255, 255, 255],
//         width: 1,
//       },
//     },
//   });
//   this.graphicsLayer.add(clippedGraphic);
// }
});
this.clickHandler;
},
createMapView() {
try {
// 底图使用的切片图层
// this.mapTileLayer = new TileLayer({
//   url: "https://map.geoq.cn/arcgis/rest/services/ChinaOnlineCommunity_Mobile/MapServer",
// });
// 创建地图Map
// this.map = new Map({
//   basemap:  [this.mapTileLayer],
// });
let FeaturemapLayer = new FeatureLayer({
url: "http://localhost:6080/arcgis/rest/services/jiangsu/MapServer",
});
// this.map = new Map({
//   // basemap: "topo-vector",
//   basemap: "dark-gray",
// });
// 天地图的瓦片服务URL
const tiandituLayer = new WebTileLayer({
urlTemplate:
"http://{subDomain}.tianditu.gov.cn/vec_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=vec&STYLE=default&TILEMATRIXSET=w&TILEMATRIX={level}&TILEROW={row}&TILECOL={col}&FORMAT=tiles&tk=1ba928ced7f95e4a6c5dcf7e348d36ef",
subDomains: ["t0", "t1", "t2", "t3", "t4", "t5", "t6", "t7"],
});
// 天地图的矢量注记瓦片服务URL
const tiandituAnnotationLayer = new WebTileLayer({
urlTemplate:
"http://{subDomain}.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cva&STYLE=default&TILEMATRIXSET=w&TILEMATRIX={level}&TILEROW={row}&TILECOL={col}&FORMAT=tiles&tk=1ba928ced7f95e4a6c5dcf7e348d36ef",
subDomains: ["t0", "t1", "t2", "t3", "t4", "t5", "t6", "t7"],
});
this.map = new Map({
basemap: {
baseLayers: [tiandituLayer],
},
});
// this.FeatureLayer = new FeatureLayer({
//   url: "http://localhost:6080/arcgis/rest/services//MyMapService/MapServer",
// });
this.view = new MapView({
container: "mapview",
center: [119.923, 32.51],
map: this.map,
zoom: 7,
});
this.map.add(FeaturemapLayer);
this.map.add(tiandituAnnotationLayer);
//添加点
FeaturemapLayer.renderer = new SimpleRenderer({
symbol: new SimpleFillSymbol({
color: [173, 216, 230, 0.1], // 透明颜色，最后一个参数为透明度
outline: {
color: [128, 128, 128],
width: 2,
},
}),
});
let popupTemplate;
// 在添加新的图形之前清除旧的图形
this.view.graphics.removeAll();
this.pointGraphicLayer = new GraphicsLayer();
this.map.add(this.pointGraphicLayer);
if (this.tableData.length !== 0) {
this.tableData.forEach((item) => {
const point = {
type: "point",
longitude: Number(item.lon),
latitude: Number(item.lat),
};
let symbol;
if (item.progress === "进行中" && item.type == "水体") {
symbol = {
type: "picture-marker",
url: require("../../assets/images/marker/water_ongoing.png"),
width: "30px",
height: "39px",
};
//添加信息框
popupTemplate = {
title: item.name,
content: `
<div>
<p>类型：${item.type}</p>
<p>进度：${item.progress}</p>
</div>
`,
};
} else if (item.progress === "进行中" && item.type == "土壤") {
symbol = {
type: "picture-marker",
url: require("../../assets/images/marker/soil_ongoing.png"),
width: "30px",
height: "39px",
};
//添加信息框
popupTemplate = {
title: item.name,
content: `
<div>
<p>类型：${item.type}</p>
<p>进度：${item.progress}</p>
</div>
`,
};
} else if (item.progress === "已完成" && item.type == "水体") {
symbol = {
type: "picture-marker",
url: require("../../assets/images/marker/water_completed.png"),
width: "30px",
height: "39px",
};
//添加信息框
popupTemplate = {
title: item.name,
content: `
<div>
<p>类型：${item.type}</p>
<p>进度：${item.progress}</p>
</div>
`,
};
} else if (item.progress === "已完成" && item.type == "土壤") {
symbol = {
type: "picture-marker",
url: require("../../assets/images/marker/soil_completed.png"),
width: "30px",
height: "39px",
};
//添加信息框
popupTemplate = {
title: item.name,
content: `
<div>
<p>类型：${item.type}</p>
<p>进度：${item.progress}</p>
</div>
`,
};
}
// 添加点
const graphic = new Graphic({
geometry: point,
symbol: symbol,
popupTemplate: popupTemplate,
attribute: item,
});
this.pointGraphicLayer.add(graphic);
//点击每个点后将item存在this.selectedItem中
this.$store.commit("_setDefaultMapView", this.view);
});
}
// this.view.on("click", (event) => {
//   // 使用点击事件的屏幕坐标来查询图形层
//   this.view.hitTest(event.screenPoint).then((response) => {
//     // 检查是否有图形被点击
//     if (response.results.length) {
//       const graphic = response.results.find(
//         (r) => r.graphic.layer === this.pointGraphicLayer
//       ).graphic;
//       // 这里可以对选中的图形进行处理
//       this.selectedItem = graphic.attribute;
//     }
//   });
// });
this.view.on("click", (event) => {
// 使用点击事件的屏幕坐标来查询图形层
this.view
.hitTest(event.screenPoint)
.then((response) => {
// 检查是否有图形被点击
if (response.results && response.results.length) {
const graphic = response.results.find(
(r) => r.graphic && r.graphic.layer === this.pointGraphicLayer
);
if (graphic && graphic.graphic) {
// 这里可以对选中的图形进行处理
this.selectedItem = graphic.graphic.attribute;
} else {
console.log("No matching graphic found");
}
} else {
console.log("No results found");
}
})
.catch((error) => {
console.error("Error during hitTest:", error);
});
});
} catch (err) {
console.error(err);
}
},
//点击接受子组件数据
handleClickItem(item) {
this.view.center = [Number(item.lon), Number(item.lat)];
this.view.zoom = 15;
},
startDrawingPolygon() {
// 初始化绘图工具
this.draw = new Draw({ view: this.view });
// 开始监听绘制多边形的行为
const action = this.draw.create("polygon", { mode: "click" });
// 使用箭头函数确保 this 指向正确
action.on("vertex-add", (evt) => {
this.measureLine(evt.vertices);
});
action.on("cursor-update", (evt) => {
this.measureLine(evt.vertices);
});
action.on("draw-complete", (evt) => {
this.measureLine(evt.vertices);
});
action.on("vertex-remove", (evt) => {
this.measureLine(evt.vertices);
});
},
// ... 其他代码 ...
measureLine(vertices) {
this.view.graphics.removeAll();
let line = this.createLine(vertices);
let graphic = new Graphic({
geometry: line,
symbol: {
type: "simple-line",
color: "red",
width: 2,
},
});
this.view.graphics.add(graphic);
},
createLine(vertices) {
let polyline = {
type: "polyline",
paths: vertices,
spatialReference: this.view.spatialReference,
};
return polyline;
},
//切换底图
changeBasemap(basemap) {
const tiandituLayer = new WebTileLayer({
urlTemplate: basemap.url,
subDomains: ["t0", "t1", "t2", "t3", "t4", "t5", "t6", "t7"],
});
this.map.basemap.baseLayers = [tiandituLayer];
},
},
};
</script>
<style>
/* CSS url as a string */
#mapview {
position: relative;
width: 100%;
height: 100%;
border: none;
#chart {
position: absolute;
bottom: 5px;
right: 5px;
width: 600px;
height: 400px;
background-color: rgb(204, 218, 230);
border: 1px solid #ccc;
}
.el-dialog__body{
padding:10px 20px!important;
}
.input-box {
display: flex;
justify-content: center;
position: absolute;
width: 600px;
height: 70px;
top: 100px;
right: 70px;
background-color: rgb(223, 228, 225);
border: 1px solid #ccc;
}
.clear-btn {
margin: 14px;
}
.input-item {
margin-top: 24px;
/* 好看的字体 */
font-family: "SimHei";
/* 粗体 */
font-weight: bold;
margin-left: 5px;
}
.input-num {
margin-top: 12px;
width: 120px;
}
}
#scalebar {
position: absolute;
bottom: 25px;
left: 15px;
}
/* 移除地图边框 */
.esri-view {
--esri-view-outline: none !important;
}
.esri-popup__inline-actions-container {
display: none;
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\InfoShow\index.vue
<template>
<div class="infoshow">
<el-row type="flex" class="row-bg" justify="center">
<el-col :span="8">
<div class="user">
<img src="../../assets/images/user-default.png" class="avatar" alt="">
</div>
</el-col>
<el-col :span="16">
<div class="userinfo">
<div class="user-item">
<i class="fa fa-user"></i>
<span>{{ user.name }}</span>
</div>
<div class="user-item">
<i class="fa fa-cog">
</i>
<span>{{user.identity== '0' ? '管理员':"普通员工"}}</span>
</div>
</div>
</el-col>
</el-row>
</div>
</template>
<script>
export default{
name:'infoshow',
computed:{
user(){
return this.$store.getters.user
}
},
components:{}
}
</script>
<style lang="less" scoped>
.infoshow {
width: 100%;
height: 100%;
box-sizing: border-box;
margin-left: 200px;
display: flex;
.row-bg{
width:100%;
height:100%
}
.user {
text-align: center;
position: relative;
top: 30%;
img {
width: 150px;
border-radius: 50%;
}
}
.userinfo {
flex: 1;
height: 100%;
background-color: #eee;
span {
text-align: center;
font-size: 20px;
font-weight: 700;
}
.user-item {
position: relative;
top: 30%;
padding: 26px;
font-size: 28px;
color: #333;
display: flex;
align-items: center;
.icon {
width: 50px;
height: 50px;
}
}
}
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\Login\Login.vue
<template>
<div class="login">
<div class="login_container"></div>
<section class="form_container">
<div class="manage_tip">
<img
src="@/assets/images/logo.png"
alt=""
style="width: 550px; height: 70px"
/>
<div class="title">登录</div>
</div>
<el-form
:model="loginUser"
:rules="rules"
class="loginForm"
ref="loginForm"
label-width="100px"
>
<el-form-item class="item" prop="name">
<span slot="label">
<span style="color: white">用户名</span>
</span>
<el-input
v-model="loginUser.name"
placeholder="请输入用户名"
style="opacity: 0.8"
></el-input>
</el-form-item>
<el-form-item class="item" prop="password">
<span slot="label">
<span style="color: white">密码</span>
</span>
<el-input
v-model="loginUser.password"
placeholder="请输入密码"
type="password"
style="opacity: 0.8"
>
</el-input>
</el-form-item>
<el-form-item>
<el-button
type="primary"
class="submit_btn"
@click="submitForm('loginForm')"
>登 录</el-button
>
</el-form-item>
<div class="tiparea">
<p>还没有账号？现在<router-link to="/register">注册</router-link></p>
</div>
</el-form>
</section>
</div>
</template>
<script>
import { jwtDecode } from "jwt-decode";
export default {
name: "Login",
data() {
return {
loginUser: {
name: "",
// email: "",
password: "",
// password2: "",
// identity: ""
},
rules: {
name: [
{ required: true, message: "用户名不能为空", trigger: "change" },
{
min: 2,
max: 30,
message: "长度在 2 到 30 个字符",
trigger: "blur",
},
],
password: [
{ required: true, message: "密码不能为空", trigger: "blur" },
{
min: 6,
max: 30,
message: "长度在 6 到 30 个字符",
trigger: "blur",
},
],
},
};
},
methods: {
submitForm(formName) {
//获取表单元素
this.$refs[formName].validate((valid) => {
if (valid) {
this.$axios
.post("/user/login", this.loginUser)
.then((res) => {
const { token } = res.data;
// console.log(token)
localStorage.setItem("mytoken", token);
// 解析token
const decode = jwtDecode(token);
console.log(decode);
// 将解析后的token存入vuex中
this.$store.dispatch("setIsAutnenticated", !this.isEmpty(decode));
this.$store.dispatch("setUser", decode);
this.$router.push("/");
})
.catch((err) => {
console.log(err);
this.$message.error("登录失败，请检查用户名及密码是否正确！");
});
} else {
this.$message({
type: "error",
message: "错误提交申请",
});
return false;
}
});
},
isEmpty(value) {
return (
value === undefined ||
value === null ||
(typeof value === "object" && Object.keys(value).length === 0) ||
(typeof value === "string" && value.trim().length === 0)
);
},
},
};
</script>
<style lang="less" scoped>
.login_container {
background-color: rgb(237, 237, 237);
opacity: 0.7;
position: absolute;
top: 18%;
left: 450px;
width: 40%;
height: 70%;
border: 4px solid #6c73ee; /* 增加边框样式和颜色 */
border-radius: 10px; /* 稍微增加圆角 */
box-shadow: 0px 16px 16px rgba(0, 0, 0, 0.8); /* 调整阴影效果 */
}
.login {
position: relative;
width: 100%;
height: 100%;
background: url(../../assets/images/background.jpg) no-repeat center center;
background-size: 100% 100%;
.loginForm {
position: relative;
left: 70px;
}
}
.form_container {
// width: 370px;
// height: 210px;
position: absolute;
padding: 25px;
border-radius: 5px;
text-align: center;
left: 30%;
top: 20%;
// background-color: #fff;
// opacity: 0.5;
}
.form_container .manage_tip .title {
font-family: "SimSun", "宋体", sans-serif;
font-weight: bold;
font-size: 33px;
color: #1c2677;
}
.loginForm {
margin-top: 20px;
// background-color: #fff;
padding: 20px 40px 20px 20px;
border-radius: 5px;
box-shadow: 0px 5px 10px #cccc;
background-color: rgb(94, 90, 90);
opacity: 0.7;
width: 400px;
}
.submit_btn {
width: 100%;
}
.tiparea {
text-align: right;
font-size: 12px;
color: #fff;
}
.item .el-form-item__label {
color: #fff;
}
.tiparea p a {
color: #409eff;
}
// 改变input里的字体颜色
/deep/input::-webkit-input-placeholder {
color: white;
font-size: 15px;
}
// 改变input框背景颜色
/deep/.el-input__inner {
background-color: transparent !important;
// background-color:#4d4f50;
color: white; // 输入字体颜色
// opacity: 0.5;
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\PollutionAnalysis\index.vue
<template>
<div class="analysis">
<div class="page-header">
<el-row>
<el-col :span="8">
<div>
<el-page-header @back="goBack" content="污染分析"> </el-page-header>
</div>
</el-col>
<el-col :span="16">
<div class="button-header">
<el-button
size="medium"
class="fa fa-file-excel-o"
@click="showRecord"
>分析记录</el-button
>
<el-button
size="medium"
class="fa fa-cloud-download"
@click="downloadTemplate"
>下载模板</el-button
>
<el-button
size="medium"
@click="drawer = true"
class="fa fa-info-circle"
>帮助
</el-button>
</div>
</el-col>
</el-row>
<div>
<el-drawer title="操作步骤" :visible.sync="drawer" :modal="false">
<div class="dialogBox">
<el-steps direction="vertical">
<el-step
title="步骤 1"
status="process"
description="点击“下载模板”按钮下载模板文件，填写模板，并保存为.xlsx格式。"
></el-step>
<el-step
title="步骤 2"
status="process"
description="选择时间，点击“数据导入”按钮，选择已填写好的EXCEL文件，将文件导入。"
></el-step>
<el-step
title="步骤 3"
status="process"
description="选择某一块数据，点击“污染分析”按钮，在弹出的弹框中选择某一个污染标准，背景为绿色的为正常值，背景为红色的为超标值。"
></el-step>
<el-step
title="步骤 4"
status="process"
description="点击“结果查询”按钮，查看污染分析结果。"
></el-step>
</el-steps>
</div>
</el-drawer>
</div>
<el-dialog
title="历史记录"
:visible.sync="DialogShow"
customClass="customWidth"
>
<Record ref="dialog"></Record>
</el-dialog>
</div>
<div>
<Table></Table>
</div>
</div>
</template>
<script>
import Table from "@/components/Analysis/Table.vue";
import Record from "@/components/Analysis/Record.vue";
export default {
name: "Analysis",
data() {
return {
drawer: false,
DialogShow: false,
};
},
components: { Table, Record },
methods: {
showRecord() {
this.DialogShow = true;
this.$refs.dialog.GetRecord()
},
goBack() {
this.$router.go(-1);
},
downloadTemplate() {
this.$axios
.get("/file/download/template", { responseType: "blob" })
.then((res) => {
let blob = new Blob([res.data], {
type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
});
const url = window.URL.createObjectURL(blob);
const link = document.createElement("a");
link.href = url;
link.setAttribute("download", "template.xlsx"); // 文件名
document.body.appendChild(link);
link.click();
link.remove();
})
.catch((error) => {
console.error(error);
});
},
},
};
</script>
<style land="less">
.page-header {
padding: 20px;
height: 60px;
background-color: aliceblue;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12), 0 0 6px rgba(0, 0, 0, 0.04);
.el-drawer.ltr,
.el-drawer.rtl {
top: 60px;
bottom: 0;
width: 20% !important;
}
}
.button-header {
position: relative;
width: 400px;
top: -10px;
float: right;
}
.dialogBox {
height: 500px;
}
.dialogBox {
padding: 10px;
}
.customWidth .el-dialog__header {
border-bottom: 1px solid #e0e0e0; /* 添加下框线 */
}
.analysis {
.el-dialog__body{
padding:10px 20px!important;
}
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\PollutionAnalysis\index_1.vue
<template>
<div>
<el-steps :active="active" finish-status="success" simple>
<el-step title="数据导入"
><i class="fa fa-cloud-upload fa-icon-custom" slot="icon"></i>
</el-step>
<el-step title="选择数据区"
><i class="fa fa-mouse-pointer fa-icon-custom" slot="icon"></i
></el-step>
<el-step title="污染分析"
><i class="fa fa-cogs fa-icon-custom" slot="icon"></i
></el-step>
<el-step title="结果保存"
><i
class="fa fa-floppy-o fa-icon-custom"
aria-hidden="true"
slot="icon"
></i
></el-step>
<el-step title="结果查询"
><i class="fa fa-folder-open fa-icon-custom" slot="icon"></i
></el-step>
</el-steps>
<div class="el_title">
<div class="cascader">
</div>
<el-button
:disabled="active == 4"
style="margin: 6px; float: right"
@click="next"
>下一步</el-button
>
<el-button
:disabled="active == 0"
style="margin: 6px; float: right"
@click="pre"
>上一步</el-button
>
</div>
<div v-show="active == 0">
<DataImport
:DataForm="DataForm1"></DataImport>
</div>
<div v-show="active == 1">
<DataRegion></DataRegion>
</div>
<div v-show="active == 2">
<ProlluAna></ProlluAna>
</div>
<div v-show="active == 3">
<ResultSave></ResultSave>
</div>
<div v-show="active == 4">
<ResultRearch></ResultRearch>
</div>
</div>
</template>
<script>
import DataImport from "../../components/Analysis/DataImport_1"
import DataRegion from "../../components/Analysis/DataRegion"
import ProlluAna from "../../components/Analysis/ProlluAna"
import ResultRearch from "../../components/Analysis/ResultRearch"
import ResultSave from "../../components/Analysis/ResultSave"
export default {
name: "index_1",
data() {
return {
//默认第一步
active: 0,
DataForm1:{
code:this.$route.params.code,
user:this.$store.getters.user.name
}
};
},
methods: {
// 步骤条下一步的方法
next() {
this.active++;
},
// 步骤条上一步的方法
pre() {
this.active--;
},
},
components: {DataImport,DataRegion,ProlluAna,ResultRearch,ResultSave},
};
</script>
<style land="less">
.el-step.is-simple .el-step__icon-inner.is-status {
font-size: 17px;
}
.fa-icon-custom {
font-size: 17px; /* 或者您希望的任何大小 */
}
.el-step.is-simple .el-step__icon {
background: 0 0;
width: 24px;
height: 24px;
font-size: 12px;
}
.el_title{
background-color: aliceblue;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12), 0 0 6px rgba(0, 0, 0, 0.04);
.cascader{
display: inline-table;
margin:5px;
height:40px
}
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\ProjectList\index.vue
<template>
<div class="manage">
<!-- //提交表单 -->
<div class="submitDialog">
<el-dialog title="新建项目" :visible.sync="isShow_add">
<AddForm :form="operateForm"></AddForm>
<div slot="footer" class="dialog-footer">
<el-button @click="isShow_add = false">取消</el-button>
<el-button type="primary" @click="confirmAdd">提交</el-button>
</div>
</el-dialog>
</div>
<div class="submitDialog">
<el-dialog title="修改信息" :visible.sync="isShow_edit">
<EditForm :form="operateForm"></EditForm>
<div slot="footer" class="dialog-footer">
<el-button @click="isShow_edit = false">取消</el-button>
<el-button type="primary" @click="confirmEdit">提交</el-button>
</div>
</el-dialog>
</div>
<!-- 新增按钮 -->
<div class="manage-header">
<div>
<el-page-header @back="goBack" style="margin-left: 10px">
</el-page-header>
</div>
<el-button
type="primary"
@click="addUser"
size="small"
icon="el-icon-circle-plus-outline"
>新增</el-button
>
<div class="searchBox">
<!-- 搜索框 -->
<el-input
class="search"
placeholder="请输入项目编号"
v-model="searchContent"
>
</el-input>
<el-button
class="searchBtn"
type="primary"
size="small"
@click="handleSearch"
>搜索</el-button
>
<el-button
class="resetBtn"
type="primary"
size="small"
@click="resetHandle"
>刷新</el-button
>
</div>
</div>
<div class="table_container">
<el-table
:data="tableData"
style="width: 100%"
height="502"
:header-cell-style="{ background: '#eef1f6', color: '#606266' }"
>
<el-table-column prop="code" align="center" label="编号" width="150">
</el-table-column>
<el-table-column
prop="name"
align="center"
label="项目名称"
></el-table-column>
<el-table-column
prop="type"
align="center"
label="项目类型"
></el-table-column>
<el-table-column
prop="address"
align="center"
label="项目地址"
></el-table-column>
<el-table-column prop="manager" align="center" label="负责人">
<template slot-scope="scope">
<el-popover trigger="hover" placement="top">
<p>姓名: {{ scope.row.name }}</p>
<p>住址: {{ scope.row.address }}</p>
<div slot="reference" class="name-wrapper">
<el-tag size="medium">{{ scope.row.manager }}</el-tag>
</div>
</el-popover>
</template>
</el-table-column>
<el-table-column
prop="date"
align="center"
label="项目日期"
width="100"
></el-table-column>
<el-table-column
prop="progress"
align="center"
label="项目进展"
></el-table-column>
<el-table-column
prop="lon"
align="center"
label="坐标经度"
width="100"
></el-table-column>
<el-table-column
prop="lat"
align="center"
label="坐标纬度"
width="100"
></el-table-column>
<el-table-column
prop="imageUrl"
align="center"
label="图片"
width="100"
>
<template slot-scope="scope">
<img :src="scope.row.imageUrl" alt="图片" width="50" height="50" />
</template>
</el-table-column>
<el-table-column
prop="operation"
align="center"
width="200"
label="操作"
>
<!-- //删除按钮与删除按钮 -->
<template slot-scope="scope">
<el-button
type="warning"
icon="el-icon-edit-outline"
title="编辑"
size="small"
@click.stop="handleEdit(scope.$index, scope.row)"
>
</el-button>
<el-button
type="danger"
icon="el-icon-delete-solid"
size="small"
title="删除"
@click.stop="handleDelete(scope.$index, scope.row)"
></el-button>
<el-button
type="success"
icon="el-icon-data-analysis"
size="small"
title="污染分析"
@click.stop="handleSkip(scope.$index, scope.row)"
></el-button>
</template>
</el-table-column>
</el-table>
<!-- 分页 -->
<el-container>
<div class="pagination">
<el-pagination
@size-change="handleSizeChange"
@current-change="handleCurrentChange"
:current-page.sync="paginations.page_index"
:page-sizes="paginations.page_sizes"
:page-size="paginations.page_size"
:layout="paginations.layout"
:total="paginations.total"
>
</el-pagination>
</div>
</el-container>
</div>
</div>
</template>
<script>
import AddForm from "../../components/AddForm.vue";
import EditForm from "../../components/EditForm.vue";
export default {
name: "ProjectList",
data() {
return {
operateType: "add",
user: this.$store.getters.user.name,
isShow_add: false, //提交表单是否显示
isShow_edit: false, //提交表单是否显示
selectedRow: null,
tableData: [], // 存放当前页面表格数据
allTableData: [], // 存放所有表格数据以及搜索后的数据
filterTableData: [], // 存放所有表格数据供搜索
config: {
page: 1,
total: 30,
},
//提交表单里的元素
operateForm: {
code: "",
name: "",
type: "",
address: "",
manager: "",
date: "",
progress: "",
user: "",
lon: "",
lat: "",
imageUrl: "",
},
// formLabel: [],
searchFrom: {
keyword: "",
},
paginations: {
page_index: 1, // 当前页
total: 0, // 总数
page_size: 10, // 默认每页显示多少条
page_sizes: [5, 10, 15, 20], // 选择每页显示多少条
layout: "total, sizes, prev, pager, next, jumper",
},
// 搜索框里面的内容
searchContent: "",
};
},
components: { AddForm, EditForm },
methods: {
goBack() {
this.$router.go(-1);
},
confirmAdd() {
this.$axios
.post("/proj/add", this.operateForm)
.then((res) => {
this.isShow_add = false;
this.getList();
})
.catch((err) => console.log(err));
},
confirmEdit() {
this.$axios
.post("/proj/edit", this.operateForm)
.then((res) => {
this.isShow_edit = false;
this.getList();
})
.catch((err) => console.log(err));
},
handleSkip(index, row) {
this.$router.push(`/pollutionanalysis/${row.code}/${row.name}`);
},
getList() {
const { name } = this.$store.getters.user;
const userdata = {
name,
};
this.$axios
.post("/proj/all", userdata)
.then((res) => {
this.tableData = res.data;
this.allTableData = res.data;
this.filterTableData = res.data;
this.setPaginations();
})
.catch((err) => {
console.log(err);
});
},
addUser() {
this.isShow_add = true;
this.operateType = "add";
this.operateForm = {
code: "",
name: "",
type: "",
address: "",
manager: "",
date: "",
progress: "",
user: this.user,
lon: "",
lat: "",
imageUrl: "",
};
},
handleEdit(index, row) {
this.operateType = "edit";
this.isShow_edit = true;
this.operateForm = {
code: row.code,
name: row.name,
type: row.type,
address: row.address,
manager: row.manager,
date: row.date,
progress: row.progress,
user: this.user,
lon: row.lon,
lat: row.lat,
imageUrl: row.imageUrl,
};
},
handleDelete(index, row) {
this.operateForm = {
code: row.code,
name: row.name,
type: row.type,
address: row.address,
manager: row.manager,
date: row.date,
progress: row.progress,
user: this.user,
};
this.$confirm("此操作将永久删除该项目，是否继续？", "提示", {
confirmButtonText: "确定",
cancelButtonText: "取消",
type: "warning",
})
.then(() => {
this.$axios.post(`/proj/delete`, this.operateForm).then((res) => {
this.$message({
type: "success",
message: "删除成功",
});
this.getList();
});
})
.catch(() => {
this.$message({
type: "info",
message: "已取消删除",
});
});
},
// 分页相关函数
setPaginations() {
this.paginations.total = this.allTableData.length;
this.paginations.page_index = 1;
this.tableData = this.allTableData.filter(
(item, index) => index < this.paginations.page_size
);
// console.log(this.allTableData[0])
},
handleSizeChange(page_size) {
this.paginations.page_index = 1;
this.paginations.page_size = page_size;
this.tableData = this.allTableData.filter((item, index) => {
return index < page_size;
});
},
// 页面跳转
handleCurrentChange(page) {
const index = this.paginations.page_size * (page - 1);
const nums = this.paginations.page_size * page;
const tables = [];
for (let i = index; i < nums; i++) {
if (this.allTableData[i]) tables.push(this.allTableData[i]);
}
this.tableData = tables;
},
// 内容搜索
handleSearch() {
if (!this.searchContent) {
this.$message({ type: "warning", message: "请输入项目名称或项目编码" });
this.getList();
return;
}
this.allTableData = this.filterTableData.filter((item, index) => {
return (
this.searchContent === item.name || this.searchContent === item.code
);
});
this.setPaginations();
},
//重置按钮
resetHandle() {
this.getList();
},
},
created() {
this.getList();
},
// computed: {
//     user(){
//         return this.$store.getters.user
//     }
// }
};
</script>
<style lang="less">
.manage-header {
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12), 0 0 6px rgba(0, 0, 0, 0.04);
display: flex; // 弹性部局
justify-content: flex-start;
align-items: center; // 居中
margin-bottom: 10px;
height: 60px;
.searchBox {
margin-left: 950px;
}
.el-button {
}
}
.custom-table /deep/ .el-table__body tr:first-child td {
background-color: #17aec5;
}
.search {
// height: 32px;
width: 200px;
// float: right;
}
.searchBtn {
margin-left: 10px;
}
.pagination {
margin-left: auto;
margin-top: 5px;
margin-bottom: 5px;
}
.el-table__body tr:hover > td {
color: black;
background-color: rgb(119, 166, 213) !important;
cursor: pointer;
}
.el-container {
background-color: aliceblue;
}
//test-dialog是添加的类样式
.el-dialog {
position: absolute;
left: 400px;
top: -80px;
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\Register\Register.vue
<template>
<div class="register">
<div class="register_container"></div>
<section class="form_container">
<div class="manage_tip">
<img
src="@/assets/images/logo.png"
alt=""
style="width: 550px; height: 70px"
/>
<div class="title">注册</div>
</div>
<el-form
:model="registerUser"
:rules="rules"
ref="registerForm"
label-width="100px"
class="registerForm"
>
<el-form-item label="用户名" prop="name">
<span slot="label">
<span style="color: white">用户名</span>
</span>
<el-input
v-model="registerUser.name"
placeholder="请输入用户名"
style="opacity: 0.8"
></el-input>
</el-form-item>
<el-form-item label="密码" prop="password">
<span slot="label">
<span style="color: white">密码</span>
</span>
<el-input
type="password"
v-model="registerUser.password"
placeholder="请输入密码"
style="opacity: 0.8"
></el-input>
</el-form-item>
<el-form-item label="确认密码" prop="comfirempassword">
<span slot="label">
<span style="color: white">确认密码</span>
</span>
<el-input
type="password"
v-model="registerUser.comfirempassword"
placeholder="请确认密码"
></el-input>
</el-form-item>
<el-form-item>
<el-button
type="primary"
class="submit_btn"
@click="submitForm('registerForm')"
>注册</el-button
>
</el-form-item>
</el-form>
</section>
</div>
</template>
<script>
export default {
name: "register",
components: {},
data() {
var validatePass2 = (rule, value, callback) => {
if (value !== this.registerUser.password) {
callback(new Error("两次输入密码不一致!"));
} else {
callback();
}
};
return {
registerUser: {
name: "",
password: "",
//password2: "",
comfirempassword: "",
identity: "",
},
rules: {
name: [
{
required: true,
message: "用户名不能为空",
trigger: "blur",
},
{
min: 2,
max: 30,
message: "长度为2到30个字符之间",
trigger: "blur",
},
],
password: [
{
required: true,
message: "密码不能为空",
trigger: "blur",
},
{
min: 6,
max: 30,
message: "长度在6到30之间",
trigger: "blur",
},
],
comfirempassword: [
{
required: true,
message: "确认密码不能为空",
trigger: "blur",
},
{
min: 6,
max: 30,
message: "长度在6到30之间",
trigger: "blur",
},
{
validator: validatePass2,
trigger: "blur",
},
],
},
};
},
methods: {
submitForm(formName) {
console.log(this.registerUser);
this.$refs[formName].validate((valid) => {
if (valid) {
this.$axios
.post("/user/register", this.registerUser)
.then((res) => {
this.$message.success("恭喜，注册成功！");
this.$router.push("/login");
})
.catch((err) => {
// console.log(err)
this.$message.error("注册失败！");
console.log(err);
});
} else {
this.$message({
type: "error",
message: "错误提交申请",
});
return false;
}
});
},
},
};
</script>
<style lang="less" scoped>
.register {
position: relative;
width: 100%;
height: 100%;
background: url(../../assets/images/background.jpg) no-repeat center center;
background-size: 100% 100%;
.regiterForm {
position: relative;
left: 70px;
}
}
.registerForm{
margin-top: 20px;
margin-left:70px;
// background-color: #fff;
padding: 20px 40px 20px 20px;
border-radius: 5px;
box-shadow: 0px 5px 10px #cccc;
background-color: rgb(94, 90, 90);
opacity: 0.7;
width: 400px;
}
.register_container{
background-color: rgb(237, 237, 237);
opacity: 0.7;
position: absolute;
top: 18%;
left: 450px;
width: 40%;
height: 70%;
border: 4px solid #6c73ee; /* 增加边框样式和颜色 */
border-radius: 10px; /* 稍微增加圆角 */
box-shadow: 0px 16px 16px rgba(0, 0, 0, 0.8); /* 调整阴影效果 */
}
.form_container {
// width: 370px;
// height: 210px;
position: absolute;
padding: 25px;
border-radius: 5px;
text-align: center;
left: 30%;
top: 20%;
// background-color: #fff;
// opacity: 0.5;
}
.form_container .manage_tip .title {
font-family: "SimSun", "宋体", sans-serif;
font-weight: bold;
font-size: 33px;
color: #1c2677;
}
.submit_btn {
width: 100%;
}
.tiparea {
text-align: right;
font-size: 12px;
color: #fff;
}
.item .el-form-item__label {
color: #fff;
}
.tiparea p a {
color: #409eff;
}
// 改变input里的字体颜色
/deep/input::-webkit-input-placeholder {
color: white;
font-size: 15px;
}
// 改变input框背景颜色
/deep/.el-input__inner {
background-color: transparent !important;
// background-color:#4d4f50;
color: rgb(255, 255, 255); // 输入字体颜色
// opacity: 0.5;
//border: 1px solid white;
}
</style>

File: C:/Users/Administrator/Desktop/易智瑞/vue+express+mysql/client/src/views\ThreeDimensional\index.vue
<template>
<div>
<div class="analysis">
<div class="page-header">
<div>
<el-page-header @back="goBack" content="三维剖分"> </el-page-header>
</div>
</div>
<div class="table_header">
<div class="description">
<el-descriptions class="margin-top" >
<el-descriptions-item label="项目编号">{{
this.$route.params.code
}}</el-descriptions-item>
<el-descriptions-item label="项目名称">{{
this.$route.params.name
}}</el-descriptions-item>
</el-descriptions>
</div>
</div>
<div style="width: 100%; height: 575px">
<three-js-scene></three-js-scene>
</div>
</div>
</div>
</template>
<script>
import ThreeJsScene from "@/components/ThreeJsScene/ThreeJsScene.vue";
export default {
name: "three",
data() {
return {
//默认第一步
};
},
mounted() {},
methods: {
goBack() {
this.$router.push({ name: "home" });   //返回首页
},
},
components: { ThreeJsScene },
};
</script>
<style land="less">
.el-step.is-simple .el-step__icon-inner.is-status {
font-size: 17px;
}
.fa-icon-custom {
font-size: 17px; /* 或者您希望的任何大小 */
}
.el-step.is-simple .el-step__icon {
background: 0 0;
width: 24px;
height: 24px;
font-size: 12px;
}
.analysis {
.table_header {
height: 50px;
margin-top: 5px;
background-color: white;
.description {
position: relative;
top: 15px;
margin-left: 15px;
}
.el-icon-d-arrow-right {
padding: 10px;
}
}
}
</style>

